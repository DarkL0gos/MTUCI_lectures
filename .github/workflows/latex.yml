#get targets (определяем директорию)
#prepare build (определяем аргументы директории, название итогового файла)
#build (компилируем ЛаТеХ)
#upload (загружаем обратно с нужным именем)

# "ИмяЛектора_Предмет_Семестр" !!!!!

name: build and upload latex

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: get target
        id: get-target
        run: |
          FULL_PATH=semester_2/algebra_dyomin
          echo "FULL_PATH=$(echo ${FULL_PATH})" >> $GITHUB_ENV
          LECTURE_NAME=Dyomin_Algebra_2
          echo "LECTURE_NAME=$(echo ${LECTURE_NAME})" >> $GITHUB_ENV
         
      - name: Build
        id: build
        uses: xu-cheng/latex-action@v2
        with:
          root_file: main.tex
          working_directory: ${{ env.FULL_PATH }}
          args: -jobname=${{ env.LECTURE_NAME}} -pdf -file-line-error -halt-on-error -interaction=nonstopmode
          compiler: latexmk
          
      - name: upload pdf document
        uses: actions/upload-artifact@v2
        with:
           name: ${{ env.LECTURE_NAME}}.pdf
           path: ${{ env.FULL_PATH}}/${{ env.LECTURE_NAME}}.pdf
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [build]
    steps:
        # Это хак, чтобы дергать bash-команды и запоминанать их результат
      - name: Variables
          # id используется внутренне: по нему можно ссылаться на результаты из другого step
        id: vars
          # echo в таком форматировании позволит впоследствии ссылаться на результаты через ${{ steps.<step_id>.outputs.<variable_name> }}
        run: |
          echo "::set-output name=date::$(date +'%Y-%m-%d')"
          echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
            # Тот самый ключ, который мы указывали в upload-artifact
          name: ${{ env.LECTURE_NAME}}
      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
            # Берем результат из step с id=vars (см. выше). 
            # Получим теги вида “my_doc-<дата билда>-<первые 8 символов из sha коммита>
          tag_name: my_doc-${{ steps.vars.outputs.date }}-${{ steps.vars.outputs.sha8 }}
          release_name: My Actions document (version ${{ steps.vars.outputs.date }})
          draft: false
          prerelease: false
      # Прикладываемые файлы надо заливать отдельным step
      - name: Upload pdf asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Из предыдущего step с id=create_release генерится upload_url - по нему и надо заливать
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # Не переходим в папку latex_sources, поскольку download-artifacts грузит в текущую директорию
          asset_path: ./${{ env.LECTURE_NAME}}.pdf
          asset_name: ${{ env.LECTURE_NAME}}.pdf
          asset_content_type: application/pdf      
        
        
        
        
        
        
        
  

  
  
